// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as EditorModel from "../EditorModel.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as Webapi__Dom__Element from "rescript-webapi/src/Webapi/Dom/Webapi__Dom__Element.res.mjs";

function TextArea(props) {
  var match = EditorModel.useEditorState();
  var dispatch = match[1];
  var state = match[0];
  var textAreaRef = React.useRef(null);
  React.useEffect((function () {
          Belt_Option.forEach(Belt_Option.flatMap(Caml_option.nullable_to_opt(textAreaRef.current), Webapi__Dom__Element.asHtmlElement), (function (prim) {
                  prim.focus();
                }));
        }), []);
  var handleChange = function ($$event) {
    var newText = $$event.target.value;
    var newLines = Js_string.split("\n", newText);
    dispatch({
          TAG: "UpdateLines",
          _0: newLines
        });
  };
  var handleKeyDown = function ($$event) {
    if ($$event.key !== "Enter") {
      return ;
    }
    $$event.preventDefault();
    var currentLineIndex = state.cursor.line;
    var isLastLine = currentLineIndex === (state.lines.length - 1 | 0);
    var isAtEndOfLine = state.cursor.column === Belt_Array.getExn(state.lines, currentLineIndex).length;
    if (isLastLine && isAtEndOfLine) {
      dispatch("AppendNewLine");
    } else {
      dispatch({
            TAG: "InsertNewLine",
            _0: currentLineIndex + 1 | 0
          });
    }
    var newCursor_line = state.cursor.line + 1 | 0;
    var newCursor = {
      line: newCursor_line,
      column: 0
    };
    dispatch({
          TAG: "UpdateCursor",
          _0: newCursor
        });
  };
  var handleCursorChange = function ($$event) {
    var target = $$event.target;
    var selectionStart = target.selectionStart;
    var textBeforeCursor = Js_string.substring(0, selectionStart, target.value);
    var lines = Js_string.split("\n", textBeforeCursor);
    var currentLine = lines.length - 1 | 0;
    var currentColumn = Belt_Array.getExn(lines, currentLine).length;
    dispatch({
          TAG: "UpdateCursor",
          _0: {
            line: currentLine,
            column: currentColumn
          }
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("textarea", {
                      ref: Caml_option.some(textAreaRef),
                      className: "flex-grow p-4 font-mono text-sm resize-none bg-white focus:outline-none ",
                      value: Belt_Array.joinWith(state.lines, "\n", (function (x) {
                              return x;
                            })),
                      onKeyDown: handleKeyDown,
                      onChange: handleChange,
                      onSelect: handleCursorChange
                    }),
                JsxRuntime.jsx("div", {
                      children: "行: " + String(state.cursor.line + 1 | 0) + ", 列: " + String(state.cursor.column + 1 | 0),
                      className: "bg-gray-200 p-2 text-sm"
                    })
              ],
              className: "flex flex-col h-screen bg-gray-100"
            });
}

var make = TextArea;

export {
  make ,
}
/* react Not a pure module */
